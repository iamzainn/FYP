I'll provide a comprehensive guide for adding new components to your project. Since I can't create a direct text file, here's the step-by-step process:

Comprehensive Guide for Adding New Components to Web Store Builder
Step 1: Create the Component Placeholder for the Sidebar
File: src/components/editor/[ComponentName]Placeholder.tsx


import { EditorBtns } from '@/lib/constants'
import { [RelevantIcon] } from 'lucide-react'
import React from 'react'

type Props = {}

const [ComponentName]Placeholder = (props: Props) => {
  const handleDragStart = (e: React.DragEvent, type: EditorBtns) => {
    if (type === null) return
    e.dataTransfer.setData('componentType', type)
  }

  return (
    <div
      draggable
      onDragStart={(e) => handleDragStart(e, '[componentType]')}
      className="h-14 w-14 bg-muted rounded-lg flex items-center justify-center cursor-grab"
    >
      <[RelevantIcon]
        size={40}
        className="text-muted-foreground"
      />
    </div>
  )
}

export default [ComponentName]Placeholder


---

Create the Main Component
File: src/components/editor/[ComponentName].tsx or src/components/editor/BUILDER/[ComponentName].tsx


'use client'

import { Badge } from '@/components/ui/badge'
import { EditorBtns } from '@/lib/types'
import { EditorElement, useEditor } from '@/providers/editor/editor-provider'
import clsx from 'clsx'
import { Trash } from 'lucide-react'
import React from 'react'

type Props = {
  element: EditorElement
}

const [ComponentName] = (props: Props) => {
  const { dispatch, state } = useEditor()

  const handleDragStart = (e: React.DragEvent, type: EditorBtns) => {
    if (type === null) return
    e.dataTransfer.setData('componentType', type)
  }

  const handleOnClickBody = (e: React.MouseEvent) => {
    e.stopPropagation()
    dispatch({
      type: 'CHANGE_CLICKED_ELEMENT',
      payload: {
        elementDetails: props.element,
      },
    })
  }

  const handleDeleteElement = () => {
    dispatch({
      type: 'DELETE_ELEMENT',
      payload: { elementDetails: props.element },
    })
  }

  const styles = props.element.styles

  return (
    <div
      style={styles}
      draggable
      onDragStart={(e) => handleDragStart(e, '[componentType]')}
      onClick={handleOnClickBody}
      className={clsx(
        'p-[2px] w-full m-[5px] relative text-[16px] transition-all flex items-center justify-center',
        {
          '!border-blue-500': 
            state.editor.selectedElement.id === props.element.id,
          'border-solid': state.editor.selectedElement.id === props.element.id,
          'border-dashed border-[1px] border-slate-300': !state.editor.liveMode,
        }
      )}
    >
      {state.editor.selectedElement.id === props.element.id &&
        !state.editor.liveMode && (
          <Badge className="absolute -top-[23px] -left-[1px] rounded-none rounded-t-lg">
            {state.editor.selectedElement.name}
          </Badge>
        )}

      {/* Component-specific content here */}
      
      {state.editor.selectedElement.id === props.element.id &&
        !state.editor.liveMode && (
          <div className="absolute bg-primary px-2.5 py-1 text-xs font-bold -top-[25px] -right-[1px] rounded-none rounded-t-lg text-white">
            <Trash
              className="cursor-pointer"
              size={16}
              onClick={handleDeleteElement}
            />
          </div>
        )}
    </div>
  )
}

export default [ComponentName]


Step 3: Add Component to ComponentTab.tsx
File: src/components/editor/ComponentTab.tsx

Add your component placeholder to the elements array:

// 1. Import the placeholder
import [ComponentName]Placeholder from "./[ComponentName]Placeholder"

// 2. Add to elements array
const elements = [
  // ...existing elements
  {
    Component: <[ComponentName]Placeholder />,
    label: '[Component Label]',
    id: '[componentType]',
    group: '[layout or elements]', // Choose which group it belongs to
  },
]


Step 4: Update Container.tsx to Handle New Component Drops
File: src/components/editor/BUILDER/Container.tsx

Add a new case in the handleOnDrop function:

case '[componentType]':
  dispatch({
    type: 'ADD_ELEMENT',
    payload: {
      containerId: id,
      elementDetails: {
        content: [], // If needed for nested components
        id: v4(),
        name: '[Component Display Name]',
        styles: {},
        type: '[componentType]',
      },
    },
  })
  break;



Step 5: Update TwoColComponent.tsx (if applicable)
File: src/components/editor/BUILDER/TwoColComponent.tsx

Add the same case as in Container.tsx to handle drops in two-column layouts:

case '[componentType]':
  dispatch({
    type: 'ADD_ELEMENT',
    payload: {
      containerId: id,
      elementDetails: {
        content: [], // If needed for nested components
        id: v4(),
        name: '[Component Display Name]',
        styles: {},
        type: '[componentType]',
      },
    },
  })
  break;

  Step 6: Add Component to recursive.tsx
File: src/components/editor/BUILDER/recursive.tsx

Import your component and add a case to render it:

// 1. Import the component
import [ComponentName] from './[ComponentName]' // Or correct path

// 2. Add case in the switch statement inside the Recursive component
case '[componentType]':
  return <[ComponentName] key={element.id} element={element} />


Step 7: Update Types (if necessary)
File: src/lib/types.ts or src/lib/constants.ts

Ensure your component type is included in the EditorBtns type:
export type EditorBtns =
  | 'text'
  | 'container'
  | // ...other types
  | '[componentType]'




Step 8: Create Any Supporting Components or Files (if needed)
If your component requires additional functionality (like forms, specialized UI, etc.), create those files in the appropriate directories.

Important Considerations:
Component Structure: Follow the established pattern with draggable divs, badges for selected elements, and delete buttons.
State Management: Use the useEditor hook for accessing and modifying the editor state.
Styles: Use the styles prop from the element for positioning and appearance.
clsx Usage: Use clsx for conditional class application, especially for selection indicators.
Event Handlers: Properly implement drag-and-drop, click, and delete handlers.
Types: Ensure all types are properly defined and imported.
Content Structure: For components that might contain nested elements, ensure the content array is properly handled.
Live Mode: Implement different rendering for live mode vs. edit mode.
By following these steps consistently, you can easily add new components to your web store builder while maintaining the existing architecture and functionality.  
